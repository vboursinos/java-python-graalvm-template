<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- following: standard maven pom.xml -->

    <groupId>org.example.github.paulvi</groupId>
    <artifactId>java-python-graalvm</artifactId>
    <version>1.1</version>

    <properties>
        <mainClass>RunGraalPython3</mainClass>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>

        <venv.name>venv</venv.name>
        <pip.install.requirements.filename>req.txt</pip.install.requirements.filename>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.graalvm.sdk/graal-sdk -->
        <dependency>
            <groupId>org.graalvm.sdk</groupId>
            <artifactId>graal-sdk</artifactId>
            <version>22.1.0</version>
        </dependency>
    </dependencies>

    <build>
        <!-- remove this finalName definition to get default ${project.artifactId}-${project.version} value -->
        <finalName>${project.artifactId}</finalName>
        <resources>
            <!--
             ! We make sure to include the virtual environment and any additional
             ! Python files with the build artifacts.
              -->
            <resource>
                <directory>${project.basedir}</directory>
                <includes>
                    <include>${venv.name}/**/*</include>
                </includes>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources/</directory>
                <includes>
                    <include>*.py</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <!-- require GraalVM, used in profiles executions -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <executions>
                    <execution>
                        <id>enforce-graalvm-python</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireFilesExist>
                                    <message>You must set JAVA_HOME to a GraalVM with Python installed.</message>
                                    <files>
                                        <file>${env.GRAALVM_HOME}/bin/graalpy</file>
                                    </files>
                                </requireFilesExist>
                            </rules>
                            <fail>true</fail>
                            <failFast>true</failFast>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>${mainClass}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>prepare-venv</id>
            <activation>
                <file>
                    <missing>${venv.name}/bin/pip</missing>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.6.0</version>
                        <executions>
                            <execution>
                                <!--
                                 ! This execution creates the virtual environment
                                 ! to contain the Python packages that we will be
                                 ! using in the Java program.
                                  -->
                                <id>Prepare venv named ${venv.name}</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${env.GRAALVM_HOME}/bin/graalpy</executable>
                                    <arguments>
                                        <argument>-m</argument>
                                        <argument>venv</argument>
                                        <argument>${venv.name}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <!--
                                 ! This execution installs the required
                                 ! packages. To do so it simply calls the 'pip'
                                 ! package manager inside the virtual environment
                                 ! that we've created above.
                                  -->
                                <id>Install required packages into venv</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${venv.name}/bin/pip</executable>
                                    <arguments>
                                        <argument>install</argument>
                                        <argument>-r</argument>
                                        <argument>${pip.install.requirements.filename}</argument>
                                    </arguments>
                                    <environmentVariables>
                                        <VIRTUAL_ENV>${project.basedir}/${venv.name}</VIRTUAL_ENV>
                                        <PIP_CONFIG_FILE>${project.basedir}/pip.conf</PIP_CONFIG_FILE>
                                    </environmentVariables>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>run</id>
            <activation>
                <file>
                    <exists>${venv.name}/bin/pip</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.0.0</version>
                        <executions>
                            <execution>
                                <id>default-cli</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>${env.GRAALVM_HONE}/bin/java</executable>
                            <arguments>
                                <argument>-classpath</argument>
                                <classpath/>
                                <argument>${mainClass}</argument>
                            </arguments>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
